%%Authors: Allyson Chen & Kevin Vo
%%Emails:  aechen@ucsd.edu    k1vo@ucsd.edu
%%Calculates the weight of the plane analytical from the sum of its
%%components
%%This program is a MATLAB version of CHT = (xach-xcg)Sh/cS and CVT = (xach-xcg)Sv/bS

%% Misc Variables

%%battery = battery weight
%%payload = payload weight
%%q = dynamic pressure
%%empty_struct_fudge = fudgefactor 
%%misc_weight_fudge_factor
%%load_fact_ult = load factor
%%gross = gross weight
%%new gross weight

%% Wing Variables

%%S = wing area
%%AR = wing aspect ratio
%%taperRatio = taperRatio of wing
%%sweepAngle = wing sweep angle
%%wing_t_over_c = thickness over chord of wing

%% Horizontal Tail Variables
%%w_htail = weight of htail 
%%S_h = horizontal tail area
%%htail_sweep = horizontal tail sweep
%%htail_t_over_c = thickness over chord of horizontal tail
%%htail_ar = horizontal tail aspect ratio
%%htail_taper = taper of hoziontal tail



%% Vertical Tail Variables
%%w_vtail = weight of vertical tail 
%%S_v = vertical tail area 
%%vtail_ar = vertical tail aspect ratio
%%vtail_t_over_c = thickness over chord of vertical tail
%%vtail_sweep = vertical tail sweep
%%vtail_taper = taper of vertical tail

%% Fuselage Variables
%%fus_wet = 
%%tail_len = length of tail
%%fuse_len = length of fuselage
%%fuse_str_depth =


function [gross] = compute_weight(S, battery, AR, taperRatio, sweepAngle, load_fact_ult,...
                 S_h, htail_ar, htail_taper, htail_sweep, htail_t_over_c,...
                 S_v, vtail_t_over_c, vtail_sweep, vtail_ar, vtail_taper, ...
                 fus_wet, tail_len, fuse_len, fus_str_depth, q, wing_t_over_c, empty_struct_fudge,...
                 misc_weight_fudge, payload)

    gross = 30;
    while (1)
      w_wing = weight_wing(S, battery, AR, taperRatio, sweepAngle, load_fact_ult, gross, q, wing_t_over_c);
      w_htail = weight_htail(S_h, htail_ar, htail_taper, htail_sweep, load_fact_ult, gross, htail_t_over_c, q);
      w_vtail = weight_vtail(load_fact_ult, gross, S_v, vtail_t_over_c, vtail_sweep, vtail_ar, vtail_taper, q);
      w_fuse = weight_fuse(fus_wet, tail_len, fuse_len, fus_str_depth, load_fact_ult, gross, q); 
      empty = empty_struct_fudge*(w_wing + w_htail + w_vtail + w_fuse);
      new_gross = (1 + misc_weight_fudge) * (payload + empty + battery); 
      if abs(new_gross - gross) < 0.1
        break
      end
      gross = new_gross;
    end
    gross = gross;
end

